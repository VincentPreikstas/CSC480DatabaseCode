Example Entry (Entries go beneath one of the four Categories below):

Description: This script selects exampleColumn from exampleTable to serve as an example! (This can really be as long or short as you want, more detail is appreciated if the SQL statement is complex)

SQL:

SELECT exampleColumn
FROM exampleTable

____________________________________________________________________________

Instantiation/Table Creation

USER DB

Description: Create the Users table in the User and Login DB

SQL:

CREATE TABLE Users (
	userID INT AUTO_INCREMENT,
	userName VARCHAR(100) NOT NULL,
	passwordHash VARCHAR(1000),
	userType VARCHAR (30),
	email VARCHAR(100),
userShoppingBool TINYINT DEFAULT 0,
	PRIMARY KEY(userID)
);









LISTS DB


Description: Create the ShoppingLists table in the lists database

SQL:

CREATE TABLE ShoppingLists(
	shoppingListID INT NOT NULL,
userID INT NOT NULL,
	listName VARCHAR(100) NOT NULL,
	listDateCreated DATETIME DEFAULT CURRENT_TIMESTAMP,
listPublicStatus VARCHAR(10) DEFAULT “private”,
PRIMARY KEY (shoppingListID)
);

Description: Create the ShoppingListContents table in the lists database

SQL:

CREATE TABLE ShoppingListContents(
	shoppingListID INT NOT NULL,
	catName VARCHAR(100) NOT NULL,
	quantityItem INT DEFAULT 1,
	PRIMARY KEY (shoppingListID, catName),
	FOREIGN KEY (shoppingListID)
		REFERENCES ShoppingLists (shoppingListID)
		ON DELETE CASCADE
);


Description: Create the SharedShoppingLists table in the lists database

SQL:

CREATE TABLE SharedShoppingLists(
	userID INT NOT NULL,
	shoppingListID INT NOT NULL,
	PRIMARY KEY (userID, shoppingListID),
	FOREIGN KEY (shoppingListID)
		REFERENCES ShoppingLists (shoppingListID)
		ON DELETE CASCADE
);

Description: Create the MissedItemsLists table in the lists database

SQL:
	CREATE TABLE MissedItemsLists (
 		 missedItemsListID INT AUTO_INCREMENT,
  		 userID INT NOT NULL,
 		 PRIMARY KEY (missedItemsListID)
  );

Description: Create the MissedItems table in the lists database

SQL:
CREATE TABLE MissedItems (
  	missedItemsListID INT NOT NULL,
  	catName VARCHAR(45) NOT NULL,
  	quantityItem INT NULL,
 	PRIMARY KEY (missedItemsListID, catName),
	FOREIGN KEY (missedItemsListID)
		REFERENCES MissedItemsLists (missedItemsListID)
		ON DELETE CASCADE
);

Description: Create the ArchievedShoppingLists table in the lists database

SQL:
CREATE TABLE ArchivedShoppingLists (
  	archivedShoppingListID INT AUTO_INCREMENT,
 	userID INT NOT NULL,
 	listName VARCHAR(100) NOT NULL,
 	dateShopped DATETIME DEFAULT CURRENT_TIMESTAMP ,
 	PRIMARY KEY (archivedShoppingListID)
);

Description: Create the ArchivedListsContents table in the lists database

SQL:
CREATE TABLE ArchivedListsContents (
 	archivedShoppingListID INT NOT NULL,
  	catName VARCHAR(100) NOT NULL,
  	quantityItem INT NOT NULL,
 	PRIMARY KEY (archivedShoppingListID, catName),
	FOREIGN KEY (archivedShoppingListID)
		REFERENCES ArchivedShoppingLists (archivedShoppingListID)
		ON DELETE CASCADE

);


Store Info, Nodes and Categories DB

Description: Create the categories table that contains category name, category description, stock number and sale status, with category name as primary key.

SQL:
CREATE TABLE Categories (
  	catName VARCHAR(100) NOT NULL,
 	catDescription VARCHAR(1000) DEFAULT “None”,
 	catStockNum INT DEFAULT 0,
  	saleBool TINYINT DEFAULT 0,
	picURI VARCHAR(500) DEFAULT “None”,
  	PRIMARY KEY (catName)
);

Description: Create PathFindingNodes table that will exist in the Store Info, Nodes and Categories DB database.

SQL:

CREATE TABLE PathFindingNodes(
	pathNodeID INT NOT NULL,
	northNodeID INT,
	northNodeDistance INT,
	eastNodeID INT,
	eastNodeDistance INT,
	southNodeID INT,
	southNodeDistance INT,
	westNodeID INT,
	westNodeDistance INT,
PRIMARY KEY(pathNodeID)
);

Description: Create a Departments table Store Info, Nodes and Categories DB database.

SQL:

CREATE TABLE Departments (
    	departmentID INT AUTO_INCREMENT,
    	departmentName VARCHAR(100) NOT NULL,
PRIMARY KEY(departmentID)
);


Description: Create the stores table that contains storeID, name, address, and storeLayout in Store info, Nodes, and categories DB .

SQL:

CREATE TABLE Stores (
	storeID INT AUTO_INCREMENT,
	storeName VARCHAR(100) NOT NULL,
	address VARCHAR(100) NOT NULL,
	storeLayoutPicLocationString VARCHAR (1000),
	PRIMARY KEY(storeID)

);

Description: Creates locations table in the Store Info, Nodes and Categories DB

SQL:

CREATE TABLE Locations (
 	locationID INT AUTO_INCREMENT,
departmentID INT NOT NULL,
  	aisle INT DEFAULT 0,
 	rack INT DEFAULT 0,
  	shelf VARCHAR(10) DEFAULT “None”,
  	side VARCHAR(10) DEFAULT “None”,
  	PRIMARY KEY (locationID),
	FOREIGN KEY (departmentID)
		REFERENCES Departments (departmentID)
);

Description: Create CatLocationAssociations table in the store info, nodes and categories DB

SQL:

CREATE TABLE CatLocationAssociations (
	locationID INT NOT NULL,
	catName VARCHAR(100) NOT NULL,
	PRIMARY KEY (locationID, catName),
	FOREIGN KEY (locationID)
		REFERENCES Locations(locationID)
		ON DELETE CASCADE,
	FOREIGN KEY (catName)
		REFERENCES Categories(catName)
		ON DELETE CASCADE
);

Description:

SQL:

CREATE TABLE LocationPathNodeAssociation (
	locationID INT NOT NULL,
	pathNodeID INT NOT NULL,
	PRIMARY KEY (locationID, pathNodeID),
	FOREIGN KEY (locationID)
		REFERENCES Locations(locationID)
		ON DELETE CASCADE,
	FOREIGN KEY (pathNodeID)
		REFERENCES PathFindingNodes(pathNodeID)
		ON DELETE CASCADE

);

Maintenance/Table Manipulation

USER DB

Description: Deletes all tables from User DB

SQL:

DROP TABLE Users;

LISTS DB

Description: Deletes all tables from List DB

SQL:

DROP TABLE SharedShoppingLists;
DROP TABLE ShoppingListContents;
DROP TABLE ShoppingLists;
DROP TABLE ArchivedListsContents;
DROP TABLE ArchivedShoppingLists;
DROP TABLE MissedItems;
DROP TABLE MissedItemsLists;


Description: Puts dummy data into the lists DB (COULD BE OUTDATED)

SQL:

INSERT INTO ShoppingLists (userID, listName)
	VALUES (5, "Sunday Snacks"), (3, "Saturday List"), (3, "Superbowl List"), (7, "Chip Selection");

INSERT INTO ShoppingListContents (shoppingListID, catName)
	VALUES(2, "Brownies"), (2, "Cupcakes"), (2, "Fudge"), (2, "Cookies"), (1, "Chips"),
    (1, "Queso Dip"), (1, "Salsa"), (3, "Frozen Wings"), (3, "Celery"), (3, "Blue Cheese");

INSERT INTO SharedShoppingLists (userID, shoppingListID)
	VALUES (2, 1), (7, 3);

Description: Tests foreign key constraint functionality and bad input case

SQL:

INSERT INTO ShoppingListContents (shoppingListID, catName)
	VALUES (5, "Ketchup");

DELETE FROM SharedShoppingLists WHERE shoppingListID = 3 AND userID = 7;

DELETE FROM ShoppingLists WHERE shoppingListID = 1;



Store Info, Nodes and Categories DB

Description: Delete all tables from Store Info, Nodes and Categories DB
SQL:

DROP TABLE CatLocationAssociations;
DROP TABLE LocationPathNodeAssociation;
DROP TABLE Locations;
DROP TABLE PathFindingNodes;
DROP TABLE Stores;
DROP TABLE Categories;
DROP TABLE Departments;



Description: inserting dummy data into the store DB

SQL:
INSERT INTO `test_rootsDB`.`Stores` (`storeID`, `storeName`, `address`) VALUES ('1', 'PriceShopper', '123 main Street');




Data Input

USER DB
LISTS DB
Store Info, Nodes and Categories DB

Data Querying

USER DB
LISTS DB
Store Info, Nodes and Categories DB

